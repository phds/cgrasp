
This file is part of the GNU CGRASP Library.

The GNU CGRASP Library is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at your
option) any later version.

Developers: Pedro Dias, Raul Maia 
Bugs report to : phds@cin.ufpe.br , rmf4@cin.ufpe.br

##############################################################################
                        Installing GNU CGRASP
                        ===================

Requirements:
	1. g++:
		$ sudo apt-get install g++
	2. boost:
		$ sudo apt-get install libboost-all-dev
	3. mpfr:
		$ sudo apt-get install libmpfr-dev libmpfr-doc libmpfr4 libmpfr4-dbg

Dependencies:
	1. Python 
		$[sudo] apt-get install python2.7-dev
	2. GNU MPFR library 
		$[sudo] apt-get install libmpfr-dev libmpfr-doc libmpfr4 libmpfr4-dbg
	3. Boost library
		$ sudo apt-get install libboost-all-dev

							Building CGRASP
<<<<<<< HEAD
						========================
In the CGRASP directory, to detect your system, type:

	$ autoreconf -i
	$ mkdir build
	$ cd build
	$ ../configure
=======
						=======================
Make sure there is not whitespaces in your path to cgrasp folder. In the CGRASP directory, to detect your system, type:

	$ mkdir build
	$ cd build
	$ ../configure

Type 'make' to build your programs and 'make install' to install the program in the usual or via the --prefix parameter of the configure-script defined install path 'make' to build your programs and 'make install' to install the program in the usual or via the --prefix parameter of the configure-script defined install path:

	$ make && make install
>>>>>>> 8b3e02c1ed9b31823e04ea06603b22a0c29bda3a

Type 'make' to build your programs and 'make install' to install the program in the usual or via the --prefix parameter of the configure-script defined install path 'make' to build your programs and 'make install' to install the program in the usual or via the --prefix parameter of the configure-script defined install path.

	$ [sudo] make
	$ [sudo] make install

Binary cgrasp will be created in /usr/bin.
Cgrasp headers will be created in /usr/include for future includes in others programs.
To run cgrasp you must be in build directory.

<<<<<<< HEAD
=======
							Unninstalling CGRASP
						==========================
To unninstall cgrasp, in the CGRASP directory type:
	
	$ cd build
	$ make unninstall
	$ make clean
>>>>>>> 8b3e02c1ed9b31823e04ea06603b22a0c29bda3a

=============================================================================
Following is the menu and their program options

Allowed arguments:
  --function arg        	 Specifies function name.
  --dimension arg       	 Specifies dimension.
  --lowerbound arg      	 Specifies lower bound limits.
  --upperbound arg      	 Specifies upper bound limits.
  --startgrid arg       	 Specifies start grid dimension.
  --endgrid arg         	 Specifies end grid dimension.
  --ro arg              	 Specifies the portion of neighborhood.
  --k arg               	 Specifies the number of samples rounds.
  --it arg              	 Specifies the number of iterations.
  --ep arg              	 Specifies the optimality gap.
  --excpt 					 Specifies the exception set.
  --setexpt 				 Specifies another approach of exception set.
  --seed 				 	 Specifies the seed to be used.
  --config-file file_name    Specifies the file with command line

 All program options are required. Unless you provide a config file where
 the command line is present.

=============================================================================

=============================================================================
					OUTPUT

After running cgrasp binary a trace_log.txt will be provided to trace where
the best solution was find.

=============================================================================

Examples:

	$ cgrasp --function ackley --dimension 80 --lowerbound -10 --upperbound 10 --startgrid 0.5 --endgrid 0.25 --r 0.7 --k 100 --it 20 --ep 0.0000000001 --excpt 2 2 4 3 -3 -1 --setexpt 1 5 -1 10 --seed 3145633423

	$ cgrasp --function schwefel --dimension 4 --lowerbound -500 --upperbound 500 --startgrid 0.5 --endgrid 0.25 --r 0.7 --k 100 --it 20 --ep 0.0000000001 --excpt 0 -500 500 --setexpt 1 3 -1 10 --seed 3145633423

	$ cgrasp --function branin --dimension 2 --lowerbound -5 --upperbound 15 --startgrid 0.5 --endgrid 0.25 --r 0.7 --k 1000 --it 20 --ep 0.0000000001 --excpt 0 -5 15 --setexpt 0 1 -1 10 --seed 3145633423

	$ cgrasp --config-file response-file

=====================================================================================
					PACKAGE-DATA

If you wrote your own functions please move your files to /usr/share/cgrasp-package

======================================================================================


=====================================================================================
					EXAMPLE-DATA

For test purpose we wrote a example/example.cpp and fixed the continuous variables
to try solve mixed problems. As the bounds limits goes from -inf to +inf, we decided
to limit the bound with the lowest value within lowerbound and with the largest value
within upperbound.The example contains a call to alan function with the following
parameters:
	n = 13
	1-4 and 9-13 indexes are continuous variables
	5-8 indexes are discrete variables.
We expect to reach the best value of F Star known: 2.9250

Compile and run:
	$ g++ example.cpp -lgrasp -o example
	$ ./example

======================================================================================

Aditional Notes:

1) If you want to run valgrind to seek memory leaks you must run calling valgrind-python.supp file.
2) If you have interest to write your own program and need use cgrasp it is necessary to include cgrasp into your code and compile using -lcgrasp flag. You can find a example in example folder:
	$ g++ teste.cpp -lcgrasp -o teste